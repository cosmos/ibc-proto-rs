// This file is @generated by prost-build.
/// Token defines a struct which represents a token to be transferred.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Token {
    /// the token denomination
    #[prost(message, optional, tag = "1")]
    pub denom: ::core::option::Option<Denom>,
    /// the token amount to be transferred
    #[prost(string, tag = "2")]
    pub amount: ::prost::alloc::string::String,
}
impl ::prost::Name for Token {
    const NAME: &'static str = "Token";
    const PACKAGE: &'static str = "ibc.applications.transfer.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.applications.transfer.v2.Token".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.applications.transfer.v2.Token".into()
    }
}
/// Denom holds the base denom of a Token and a trace of the chains it was sent through.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Denom {
    /// the base token denomination
    #[prost(string, tag = "1")]
    pub base: ::prost::alloc::string::String,
    /// the trace of the token
    #[prost(message, repeated, tag = "3")]
    pub trace: ::prost::alloc::vec::Vec<super::v1::Hop>,
}
impl ::prost::Name for Denom {
    const NAME: &'static str = "Denom";
    const PACKAGE: &'static str = "ibc.applications.transfer.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.applications.transfer.v2.Denom".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.applications.transfer.v2.Denom".into()
    }
}
/// FungibleTokenPacketData defines a struct for the packet payload
/// See FungibleTokenPacketData spec:
/// <https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FungibleTokenPacketData {
    /// the token denomination to be transferred
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
    /// the token amount to be transferred
    #[prost(string, tag = "2")]
    pub amount: ::prost::alloc::string::String,
    /// the sender address
    #[prost(string, tag = "3")]
    pub sender: ::prost::alloc::string::String,
    /// the recipient address on the destination chain
    #[prost(string, tag = "4")]
    pub receiver: ::prost::alloc::string::String,
    /// optional memo
    #[prost(string, tag = "5")]
    pub memo: ::prost::alloc::string::String,
}
impl ::prost::Name for FungibleTokenPacketData {
    const NAME: &'static str = "FungibleTokenPacketData";
    const PACKAGE: &'static str = "ibc.applications.transfer.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.applications.transfer.v2.FungibleTokenPacketData".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.applications.transfer.v2.FungibleTokenPacketData".into()
    }
}
/// FungibleTokenPacketDataV2 defines a struct for the packet payload
/// See FungibleTokenPacketDataV2 spec:
/// <https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FungibleTokenPacketDataV2 {
    /// the tokens to be transferred
    #[prost(message, repeated, tag = "1")]
    pub tokens: ::prost::alloc::vec::Vec<Token>,
    /// the sender address
    #[prost(string, tag = "2")]
    pub sender: ::prost::alloc::string::String,
    /// the recipient address on the destination chain
    #[prost(string, tag = "3")]
    pub receiver: ::prost::alloc::string::String,
    /// optional memo
    #[prost(string, tag = "4")]
    pub memo: ::prost::alloc::string::String,
    /// optional forwarding information
    #[prost(message, optional, tag = "5")]
    pub forwarding: ::core::option::Option<ForwardingPacketData>,
}
impl ::prost::Name for FungibleTokenPacketDataV2 {
    const NAME: &'static str = "FungibleTokenPacketDataV2";
    const PACKAGE: &'static str = "ibc.applications.transfer.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.applications.transfer.v2.FungibleTokenPacketDataV2".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.applications.transfer.v2.FungibleTokenPacketDataV2".into()
    }
}
/// ForwardingPacketData defines a list of port ID, channel ID pairs determining the path
/// through which a packet must be forwarded, and the destination memo string to be used in the
/// final destination of the tokens.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ForwardingPacketData {
    /// optional memo consumed by final destination chain
    #[prost(string, tag = "1")]
    pub destination_memo: ::prost::alloc::string::String,
    /// optional intermediate path through which packet will be forwarded.
    #[prost(message, repeated, tag = "2")]
    pub hops: ::prost::alloc::vec::Vec<super::v1::Hop>,
}
impl ::prost::Name for ForwardingPacketData {
    const NAME: &'static str = "ForwardingPacketData";
    const PACKAGE: &'static str = "ibc.applications.transfer.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.applications.transfer.v2.ForwardingPacketData".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.applications.transfer.v2.ForwardingPacketData".into()
    }
}
/// QueryDenomRequest is the request type for the Query/Denom RPC
/// method
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDenomRequest {
    /// hash (in hex format) or denom (full denom with ibc prefix) of the on chain denomination.
    #[prost(string, tag = "1")]
    pub hash: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryDenomRequest {
    const NAME: &'static str = "QueryDenomRequest";
    const PACKAGE: &'static str = "ibc.applications.transfer.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.applications.transfer.v2.QueryDenomRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.applications.transfer.v2.QueryDenomRequest".into()
    }
}
/// QueryDenomResponse is the response type for the Query/Denom RPC
/// method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDenomResponse {
    /// denom returns the requested denomination.
    #[prost(message, optional, tag = "1")]
    pub denom: ::core::option::Option<Denom>,
}
impl ::prost::Name for QueryDenomResponse {
    const NAME: &'static str = "QueryDenomResponse";
    const PACKAGE: &'static str = "ibc.applications.transfer.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.applications.transfer.v2.QueryDenomResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.applications.transfer.v2.QueryDenomResponse".into()
    }
}
/// QueryDenomsRequest is the request type for the Query/Denoms RPC
/// method
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDenomsRequest {
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryDenomsRequest {
    const NAME: &'static str = "QueryDenomsRequest";
    const PACKAGE: &'static str = "ibc.applications.transfer.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.applications.transfer.v2.QueryDenomsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.applications.transfer.v2.QueryDenomsRequest".into()
    }
}
/// QueryDenomsResponse is the response type for the Query/Denoms RPC
/// method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDenomsResponse {
    /// denoms returns all denominations.
    #[prost(message, repeated, tag = "1")]
    pub denoms: ::prost::alloc::vec::Vec<Denom>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryDenomsResponse {
    const NAME: &'static str = "QueryDenomsResponse";
    const PACKAGE: &'static str = "ibc.applications.transfer.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.applications.transfer.v2.QueryDenomsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.applications.transfer.v2.QueryDenomsResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod query_v2_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// QueryV2 provides defines the gRPC querier service for ics20-v2.
    #[derive(Debug, Clone)]
    pub struct QueryV2Client<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryV2Client<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryV2Client<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryV2Client<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            QueryV2Client::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Denoms queries all denominations
        pub async fn denoms(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryDenomsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDenomsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/ibc.applications.transfer.v2.QueryV2/Denoms",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("ibc.applications.transfer.v2.QueryV2", "Denoms"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Denom queries a denomination
        pub async fn denom(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryDenomRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDenomResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/ibc.applications.transfer.v2.QueryV2/Denom",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("ibc.applications.transfer.v2.QueryV2", "Denom"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod query_v2_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with QueryV2Server.
    #[async_trait]
    pub trait QueryV2: Send + Sync + 'static {
        /// Denoms queries all denominations
        async fn denoms(
            &self,
            request: tonic::Request<super::QueryDenomsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDenomsResponse>,
            tonic::Status,
        >;
        /// Denom queries a denomination
        async fn denom(
            &self,
            request: tonic::Request<super::QueryDenomRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryDenomResponse>,
            tonic::Status,
        >;
    }
    /// QueryV2 provides defines the gRPC querier service for ics20-v2.
    #[derive(Debug)]
    pub struct QueryV2Server<T: QueryV2> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T: QueryV2> QueryV2Server<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for QueryV2Server<T>
    where
        T: QueryV2,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/ibc.applications.transfer.v2.QueryV2/Denoms" => {
                    #[allow(non_camel_case_types)]
                    struct DenomsSvc<T: QueryV2>(pub Arc<T>);
                    impl<
                        T: QueryV2,
                    > tonic::server::UnaryService<super::QueryDenomsRequest>
                    for DenomsSvc<T> {
                        type Response = super::QueryDenomsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryDenomsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as QueryV2>::denoms(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DenomsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/ibc.applications.transfer.v2.QueryV2/Denom" => {
                    #[allow(non_camel_case_types)]
                    struct DenomSvc<T: QueryV2>(pub Arc<T>);
                    impl<
                        T: QueryV2,
                    > tonic::server::UnaryService<super::QueryDenomRequest>
                    for DenomSvc<T> {
                        type Response = super::QueryDenomResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryDenomRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as QueryV2>::denom(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DenomSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: QueryV2> Clone for QueryV2Server<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: QueryV2> tonic::server::NamedService for QueryV2Server<T> {
        const NAME: &'static str = "ibc.applications.transfer.v2.QueryV2";
    }
}
/// GenesisState defines the ibc-transfer genesis state
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    #[prost(string, tag = "1")]
    pub port_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub denoms: ::prost::alloc::vec::Vec<Denom>,
    #[prost(message, optional, tag = "3")]
    pub params: ::core::option::Option<super::v1::Params>,
    /// total_escrowed contains the total amount of tokens escrowed
    /// by the transfer module
    #[prost(message, repeated, tag = "4")]
    pub total_escrowed: ::prost::alloc::vec::Vec<
        super::super::super::super::cosmos::base::v1beta1::Coin,
    >,
    /// forwarded_packets contains the forwarded packets stored as part of the
    /// packet forwarding lifecycle
    #[prost(message, repeated, tag = "5")]
    pub forwarded_packets: ::prost::alloc::vec::Vec<ForwardedPacket>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "ibc.applications.transfer.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.applications.transfer.v2.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.applications.transfer.v2.GenesisState".into()
    }
}
/// ForwardedPacket defines the genesis type necessary to retrieve and store forwarded packets.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ForwardedPacket {
    #[prost(message, optional, tag = "1")]
    pub forward_key: ::core::option::Option<
        super::super::super::core::channel::v1::PacketId,
    >,
    #[prost(message, optional, tag = "2")]
    pub packet: ::core::option::Option<super::super::super::core::channel::v1::Packet>,
}
impl ::prost::Name for ForwardedPacket {
    const NAME: &'static str = "ForwardedPacket";
    const PACKAGE: &'static str = "ibc.applications.transfer.v2";
    fn full_name() -> ::prost::alloc::string::String {
        "ibc.applications.transfer.v2.ForwardedPacket".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/ibc.applications.transfer.v2.ForwardedPacket".into()
    }
}
